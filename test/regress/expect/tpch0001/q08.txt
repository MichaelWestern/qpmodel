select
	o_year,
	sum(case
		when nation = 'BRAZIL' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			year(o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'AMERICA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between (date '1995-01-01' ,date '1996-12-31')
			and p_type = 'ECONOMY ANODIZED STEEL'
	) as all_nations
group by
	o_year
order by
	o_year
Total cost: 56391.1
PhysicOrder  (inccost=56391.1, cost=0.1, rows=1) (actual rows=2)
    Output: all_nations.o_year[0],{sum(case with 1)/sum(all_nations.volume)(as mkt_share)}[1]
    Order by: all_nations.o_year[0]
    -> PhysicHashAgg  (inccost=56391, cost=22, rows=1) (actual rows=2)
        Output: {all_nations.o_year}[0],{sum(case with 1)}[1]/{sum(all_nations.volume)}[2](as mkt_share)
        Aggregates: sum(case with 1), sum(all_nations.volume[5])
        Group by: all_nations.o_year[0]
        -> PhysicFromQuery <all_nations> (inccost=56369, cost=20, rows=20) (actual rows=5)
            Output: all_nations.o_year[0],case with 1,all_nations.nation[2]='BRAZIL',all_nations.nation[2],'BRAZIL',all_nations.volume[1],0
            -> PhysicHashJoin  (inccost=56349, cost=2075, rows=20) (actual rows=5)
                Output: {year(orders.o_orderdate)}[1],{lineitem.l_extendedprice*1-lineitem.l_discount(as volume)}[2],n2.n_name (as nation)[3]
                Filter: part.p_partkey[0]=lineitem.l_partkey[4]
                -> PhysicScanTable part (inccost=2, cost=2, rows=2) (actual rows=1)
                    Output: part.p_partkey[0]
                    Filter: part.p_type[4]='ECONOMY ANODIZED STEEL'
                -> PhysicHashJoin  (inccost=54272, cost=12311, rows=2051) (actual rows=385)
                    Output: {year(orders.o_orderdate)}[1],{lineitem.l_extendedprice*1-lineitem.l_discount(as volume)}[2],n2.n_name (as nation)[3],lineitem.l_partkey[4]
                    Filter: n1.n_regionkey[5]=region.r_regionkey[0]
                    -> PhysicScanTable region (inccost=1, cost=1, rows=1) (actual rows=1)
                        Output: region.r_regionkey[0]
                        Filter: region.r_name[1]='AMERICA'
                    -> PhysicHashJoin  (inccost=41960, cost=14001, rows=10258) (actual rows=1810)
                        Output: {year(orders.o_orderdate)}[2],{lineitem.l_extendedprice*1-lineitem.l_discount(as volume)}[3],n2.n_name (as nation)[0],lineitem.l_partkey[4],n1.n_regionkey[5]
                        Filter: supplier.s_nationkey[6]=n2.n_nationkey[1]
                        -> PhysicScanTable nation as n2 (inccost=25, cost=25, rows=25) (actual rows=25)
                            Output: n2.n_name (as nation)[1],n2.n_nationkey[0]
                        -> PhysicHashJoin  (inccost=27934, cost=7402, rows=3691) (actual rows=1810)
                            Output: {year(orders.o_orderdate)}[2],{lineitem.l_extendedprice*1-lineitem.l_discount(as volume)}[3],lineitem.l_partkey[4],n1.n_regionkey[5],supplier.s_nationkey[0]
                            Filter: supplier.s_suppkey[1]=lineitem.l_suppkey[6]
                            -> PhysicScanTable supplier (inccost=10, cost=10, rows=10) (actual rows=10)
                                Output: supplier.s_nationkey[3],supplier.s_suppkey[0]
                            -> PhysicHashJoin  (inccost=20522, cost=11540, rows=3691) (actual rows=1810)
                                Output: {year(orders.o_orderdate)}[0],{lineitem.l_extendedprice*1-lineitem.l_discount(as volume)}[3],lineitem.l_partkey[4],n1.n_regionkey[1],lineitem.l_suppkey[5]
                                Filter: lineitem.l_orderkey[6]=orders.o_orderkey[2]
                                -> PhysicHashJoin  (inccost=2977, cost=1837, rows=922) (actual rows=452)
                                    Output: {year(orders.o_orderdate)}[2],n1.n_regionkey[0],orders.o_orderkey[3]
                                    Filter: orders.o_custkey[4]=customer.c_custkey[1]
                                    -> PhysicHashJoin  (inccost=525, cost=350, rows=150) (actual rows=150)
                                        Output: n1.n_regionkey[0],customer.c_custkey[2]
                                        Filter: customer.c_nationkey[3]=n1.n_nationkey[1]
                                        -> PhysicScanTable nation as n1 (inccost=25, cost=25, rows=25) (actual rows=25)
                                            Output: n1.n_regionkey[2],n1.n_nationkey[0]
                                        -> PhysicScanTable customer (inccost=150, cost=150, rows=150) (actual rows=150)
                                            Output: customer.c_custkey[0],customer.c_nationkey[3]
                                    -> PhysicScanTable orders (inccost=615, cost=615, rows=615) (actual rows=452)
                                        Output: year(orders.o_orderdate[4]),orders.o_orderkey[0],orders.o_custkey[1]
                                        Filter: orders.o_orderdate[4]>='1995-01-01' and orders.o_orderdate[4]<='1996-12-31'
                                -> PhysicScanTable lineitem (inccost=6005, cost=6005, rows=6005) (actual rows=6005)
                                    Output: lineitem.l_extendedprice[5]*1-lineitem.l_discount[6](as volume),lineitem.l_partkey[1],lineitem.l_suppkey[2],lineitem.l_orderkey[0]
1995,0
1996,0

