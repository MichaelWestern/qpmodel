select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 15
	and p_type like '%BRASS'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'EUROPE'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
limit 100
Total cost: 8838.58
PhysicLimit (100) (inccost=8838.58, cost=100, rows=100) (actual rows=0)
    Output: supplier.s_acctbal[0],supplier.s_name[1],nation.n_name[2],part.p_partkey[3],part.p_mfgr[4],supplier.s_address[5],supplier.s_phone[6],supplier.s_comment[7]
    -> PhysicOrder  (inccost=8738.58, cost=1.58, rows=2) (actual rows=0)
        Output: supplier.s_acctbal[0],supplier.s_name[1],nation.n_name[2],part.p_partkey[3],part.p_mfgr[4],supplier.s_address[5],supplier.s_phone[6],supplier.s_comment[7]
        Order by: supplier.s_acctbal[0], nation.n_name[2], supplier.s_name[1], part.p_partkey[3]
        -> PhysicNLJoin  (inccost=8737, cost=4994, rows=2) (actual rows=0)
            Output: supplier.s_acctbal[2],supplier.s_name[3],nation.n_name[4],part.p_partkey[0],part.p_mfgr[1],supplier.s_address[5],supplier.s_phone[6],supplier.s_comment[7]
            Filter: part.p_partkey[0]=partsupp.ps_partkey[8]
            -> PhysicScanTable part (inccost=1, cost=1, rows=1) (actual rows=0)
                Output: part.p_partkey[0],part.p_mfgr[2]
                Filter: part.p_size[5]=15 and part.p_type[4]like'%BRASS'
            -> PhysicHashJoin  (inccost=3742, cost=1254, rows=444) (actual rows=0)
                Output: supplier.s_acctbal[2],supplier.s_name[3],nation.n_name[0],supplier.s_address[4],supplier.s_phone[5],supplier.s_comment[6],partsupp.ps_partkey[7]
                Filter: supplier.s_nationkey[8]=nation.n_nationkey[1]
                -> PhysicHashJoin  (inccost=58, cost=32, rows=5) (actual rows=0)
                    Output: nation.n_name[1],nation.n_nationkey[2]
                    Filter: nation.n_regionkey[3]=region.r_regionkey[0]
                    -> PhysicScanTable region (inccost=1, cost=1, rows=1) (actual rows=0)
                        Output: region.r_regionkey[0]
                        Filter: region.r_name[1]='EUROPE'
                    -> PhysicScanTable nation (inccost=25, cost=25, rows=25) (actual rows=0)
                        Output: nation.n_name[1],nation.n_nationkey[0],nation.n_regionkey[2]
                -> PhysicHashJoin  (inccost=2430, cost=1620, rows=800) (actual rows=0)
                    Output: supplier.s_acctbal[0],supplier.s_name[1],supplier.s_address[2],supplier.s_phone[3],supplier.s_comment[4],partsupp.ps_partkey[7],supplier.s_nationkey[5]
                    Filter: supplier.s_suppkey[6]=partsupp.ps_suppkey[8]
                    -> PhysicScanTable supplier (inccost=10, cost=10, rows=10) (actual rows=0)
                        Output: supplier.s_acctbal[5],supplier.s_name[1],supplier.s_address[2],supplier.s_phone[4],supplier.s_comment[6],supplier.s_nationkey[3],supplier.s_suppkey[0]
                    -> PhysicScanTable partsupp (inccost=800, cost=800, rows=800) (actual rows=0)
                        Output: partsupp.ps_partkey[0],partsupp.ps_suppkey[1]
                        Filter: partsupp.ps_supplycost[3]=@1
                        <ScalarSubqueryExpr> 1
                            -> PhysicHashAgg  (inccost=2505, cost=402, rows=1) (actual rows=0)
                                Output: {min(partsupp__1.ps_supplycost)}[0]
                                Aggregates: min(partsupp__1.ps_supplycost[0])
                                -> PhysicHashJoin  (inccost=2103, cost=1210, rows=400) (actual rows=0)
                                    Output: partsupp__1.ps_supplycost[1]
                                    Filter: supplier__1.s_suppkey[0]=partsupp__1.ps_suppkey[2]
                                    -> PhysicHashJoin  (inccost=93, cost=25, rows=5) (actual rows=0)
                                        Output: supplier__1.s_suppkey[1]
                                        Filter: supplier__1.s_nationkey[2]=nation__1.n_nationkey[0]
                                        -> PhysicHashJoin  (inccost=58, cost=32, rows=5) (actual rows=0)
                                            Output: nation__1.n_nationkey[1]
                                            Filter: nation__1.n_regionkey[2]=region__1.r_regionkey[0]
                                            -> PhysicScanTable region as region__1 (inccost=1, cost=1, rows=1) (actual rows=0)
                                                Output: region__1.r_regionkey[0]
                                                Filter: region__1.r_name[1]='EUROPE'
                                            -> PhysicScanTable nation as nation__1 (inccost=25, cost=25, rows=25) (actual rows=0)
                                                Output: nation__1.n_nationkey[0],nation__1.n_regionkey[2]
                                        -> PhysicScanTable supplier as supplier__1 (inccost=10, cost=10, rows=10) (actual rows=0)
                                            Output: supplier__1.s_suppkey[0],supplier__1.s_nationkey[3]
                                    -> PhysicScanTable partsupp as partsupp__1 (inccost=800, cost=800, rows=800) (actual rows=0)
                                        Output: partsupp__1.ps_supplycost[3],partsupp__1.ps_suppkey[1]
                                        Filter: ?part.p_partkey[0]=partsupp__1.ps_partkey[0]


